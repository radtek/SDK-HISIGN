/**
 * 
 */
package com.hisign.sdk.service.rest.filter;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;

import javax.ws.rs.ext.ReaderInterceptorContext;

import net.sf.json.JSONObject;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.hisign.aes.AESCoder;
import com.hisign.rsa.RSACoderForServer;
import com.hisign.sdk.common.CustomServiceLayerException;

/**
 * 拦截器基类
 * @author chailiangzhi
 * @date 2016-5-25
 * 
 */
public class TraceInterceptorBase {

	/**
	 * 
	 */
	private final Logger logger = LoggerFactory.getLogger(getClass());

	/**
	 * 解密
	 * @param reqMsg
	 */
	String decryptMsg(JSONObject reqJson, ReaderInterceptorContext readerInterceptorContext, boolean decryptBody)
			throws IOException {
		// 解密
		byte[] privateKey = RSACoderForServer.getPrivateKey("conf/privateKey");
		JSONObject reqHeadJson = reqJson.getJSONObject("reqHead");
		String secretKeyRsa = reqHeadJson.getString("secretKey");
		String secretKey;
		try {
			secretKey = RSACoderForServer.decryptByPrivateKey(secretKeyRsa, privateKey);
		} catch (Exception e) {
			logger.error("非对称解密失败", e);
			throw new CustomServiceLayerException("非对称解密失败", e);
		}
		readerInterceptorContext.setProperty("secretKey", secretKey);
		logger.info("secretKey is:{}", secretKey);
		String reqBodyEn = reqJson.optString("reqBody");
		if (StringUtils.isNotEmpty(reqBodyEn) && decryptBody) {
			String reqBodyDe = AESCoder.decrypt(reqBodyEn, secretKey);
			logger.info("reqBodyDe is:{}", reqBodyDe);
			//			reqJson.put("reqBody", reqBodyDe);
			reqJson.put("reqBody",
					"\"" + reqBodyDe.replaceAll("\r", "\\r").replaceAll("\n", "\\n").replaceAll("\t", "\\t") + "\"");
		}
		String reqMsg = reqJson.toString();
		return reqMsg;
	}

	/**
	 * 写文件日志
	 * @param queryjson
	 * @param file
	 */
	void writeLog(String queryjson, File file) {
		//System.getProperty("user.home")+"\\xckyCommService-service\\
		RandomAccessFile randomAccessFile = null;
		try {
			randomAccessFile = new RandomAccessFile(file, "rw");
			randomAccessFile.write(queryjson.getBytes());
			randomAccessFile.close();
		} catch (Exception e) {
			logger.error("记录接口文件日志失败", e);
		}
	}
}
