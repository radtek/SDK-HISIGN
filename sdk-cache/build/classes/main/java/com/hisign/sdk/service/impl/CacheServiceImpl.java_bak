/**
 * 
 */
package com.hisign.sdk.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;

import org.crazycake.shiro.SerializeUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import redis.clients.jedis.JedisPoolConfig;
import redis.clients.jedis.JedisShardInfo;
import redis.clients.jedis.ShardedJedis;
import redis.clients.jedis.ShardedJedisPool;

import com.hisign.sdk.api.entity.CacheKey;
import com.hisign.sdk.api.service.CacheLoader;
import com.hisign.sdk.api.service.CacheService;
import com.hisign.sdk.common.CacheServiceException;
import com.hisign.sdk.common.Constant;

/**
 * Redis缓存服务实现
 * @author chailiangzhi
 * @date 2016-6-13
 * 
 */
public class CacheServiceImpl implements CacheService {

	/**
	 * 
	 */
	private final Logger logger = LoggerFactory.getLogger(getClass());

	/**
	 * Redis连接池
	 */
	private ShardedJedisPool pool;

	/**
	 * 从数据库加载数据
	 */
	@Autowired
	private CacheLoader cacheLoader;

	/**
	 * 
	 */
	private String host = "127.0.0.1";

	/**
	 * 
	 */
	private int port = 6379;

	/**
	 * 0 - never expire
	 */
	private int expire = 0;

	/**
	 * 初始化连接池
	 */
	@PostConstruct
	public void init() {
		// 生成多机连接信息列表
		List<JedisShardInfo> shards = new ArrayList<JedisShardInfo>();
		shards.add(new JedisShardInfo(host, port));

		// 生成连接池配置信息
		JedisPoolConfig config = new JedisPoolConfig();
		config.setMaxIdle(10);
		config.setMaxTotal(30);
		config.setMaxWaitMillis(3 * 1000);

		// 在应用初始化的时候生成连接池
		pool = new ShardedJedisPool(config, shards);

	}

	/**
	 * 应用关闭时，释放连接池资源
	 */
	@PreDestroy
	public void dostory() {
		// 
		pool.destroy();
		logger.info("I'm destory method using @PreDestroy.....");
	}

	/* (non-Javadoc)
	 * @see com.hisign.sdk.api.service.CacheService#put(com.hisign.sdk.api.entity.CacheKey, java.lang.Object, java.lang.Class)
	 */
	@Override
	public <T> boolean put(CacheKey key, T value, Class<T> t) {
		// TODO Auto-generated method stub
		String realKey = key.getType() + ":" + key.getKey() + ":" + t.getName();
		ShardedJedis client = pool.getResource();
		try {
			byte[] keyBytes = realKey.getBytes(Constant.CHARSET_NAME);
			String statusCode = client.set(keyBytes, SerializeUtils.serialize(value));
			logger.info("key：{},redis返回状态:{},", realKey, statusCode);
			if (expire != 0) {
				client.expire(keyBytes, expire);
			}
			return true;
		} catch (Exception e) {
			logger.error("缓存存储异常", e);
			throw new CacheServiceException("缓存存储异常", e);
		} finally {
			if (null != client) {
				pool.returnResource(client);
			}
		}
	}

	/* (non-Javadoc)
	 * @see com.hisign.sdk.api.service.CacheService#get(com.hisign.sdk.api.entity.CacheKey, java.lang.Class)
	 */
	@Override
	public <T> T get(CacheKey key, Class<T> t) {
		// TODO Auto-generated method stub
		String realKey = key.getType() + ":" + key.getKey() + ":" + t.getName();
		ShardedJedis client = pool.getResource();
		try {
			byte[] rawValue = client.get(realKey.getBytes(Constant.CHARSET_NAME));
			Object value = SerializeUtils.deserialize(rawValue);
			if (value == null) {
				cacheLoader.init(key, realKey);
				value = cacheLoader.call();
				if (value != null) {
					client.set(realKey.getBytes(Constant.CHARSET_NAME), SerializeUtils.serialize(value));
				}
			}
			return (T) value;
		} catch (Exception e) {
			logger.error("缓存取值异常", e);
			throw new CacheServiceException("缓存取值异常", e);
		} finally {
			if (null != client) {
				pool.returnResource(client);
			}
		}
	}

	public String getHost() {
		return host;
	}

	public void setHost(String host) {
		this.host = host;
	}

	public int getPort() {
		return port;
	}

	public void setPort(int port) {
		this.port = port;
	}

	public int getExpire() {
		return expire;
	}

	public void setExpire(int expire) {
		this.expire = expire;
	}

}
