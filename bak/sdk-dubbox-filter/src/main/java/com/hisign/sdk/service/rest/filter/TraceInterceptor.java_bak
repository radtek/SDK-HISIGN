/**
 * 
 */
package com.hisign.sdk.service.rest.filter;

import java.io.ByteArrayInputStream;
import java.io.IOException;

import javax.annotation.Priority;
import javax.ws.rs.Priorities;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.ext.ReaderInterceptor;
import javax.ws.rs.ext.ReaderInterceptorContext;
import javax.ws.rs.ext.WriterInterceptor;
import javax.ws.rs.ext.WriterInterceptorContext;

import net.sf.json.JSONObject;

import org.apache.commons.io.IOUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 日志记录的拦截器
 * @author chailiangzhi
 * @date 2015-12-26
 * 
 */
@Priority(Priorities.USER)
public class TraceInterceptor extends TraceInterceptorBase implements ReaderInterceptor, WriterInterceptor {

	/**
	 * 
	 */
	private final Logger logger = LoggerFactory.getLogger(getClass());

	/**
	 * 构造函数
	 */
	public TraceInterceptor() {
		super();
	}

	/* (non-Javadoc)
	 * @see javax.ws.rs.ext.ReaderInterceptor#aroundReadFrom(javax.ws.rs.ext.ReaderInterceptorContext)
	 */
	public Object aroundReadFrom(ReaderInterceptorContext readerInterceptorContext) throws IOException,
			WebApplicationException {
		byte[] buffer = IOUtils.toByteArray(readerInterceptorContext.getInputStream());
		String reqMsg = new String(buffer, "UTF-8");
		logger.info("request body is: \n" + reqMsg + "\n");
		// 校验请求报文合法性,不合法则抛出异常
		// checkReqMsg(reqMsg);

		JSONObject reqJson = JSONObject.fromObject(reqMsg);
		// 解密
		boolean decryptBody = true;
		reqMsg = decryptMsg(reqJson, readerInterceptorContext, decryptBody);
		readerInterceptorContext.setInputStream(new ByteArrayInputStream(reqMsg.getBytes("UTF-8")));

		// 执行业务代码
		Object ret = readerInterceptorContext.proceed();
		return ret;
	}

	/* (non-Javadoc)
	 * @see javax.ws.rs.ext.WriterInterceptor#aroundWriteTo(javax.ws.rs.ext.WriterInterceptorContext)
	 */
	public void aroundWriteTo(WriterInterceptorContext writerInterceptorContext) throws IOException,
			WebApplicationException {
		String secretKey = null;
		Object secretKeyObj = writerInterceptorContext.getProperty("secretKey");
		if (secretKeyObj != null) {
			secretKey = secretKeyObj.toString();
		}
		OutputStreamEncryptWrapper wrapper = new OutputStreamEncryptWrapper(writerInterceptorContext.getOutputStream(),
				secretKey);
		writerInterceptorContext.setOutputStream(wrapper);
		writerInterceptorContext.proceed();

		String rspMsg = new String(wrapper.getBytes(), "UTF-8");

		logger.info("response body is: \n" + rspMsg + "\n");
	}

}
